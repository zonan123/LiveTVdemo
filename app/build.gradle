apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    defaultConfig {
        applicationId "com.mediatek.wwtv.tvcenter"
        minSdkVersion 30
        targetSdkVersion 30
        versionCode 1
        flavorDimensions "versionCode"
        testApplicationId "com.mediatek.wwtv.tvcenter.tests"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    signingConfigs {
        releaseConfig_Optoma {
            keyAlias "platform"
            keyPassword "android"
            storeFile file("../../askey/m22.keystore")
            storePassword "android"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.releaseConfig_Optoma
        }

    }
    productFlavors {
        Optoma {
            signingConfig signingConfigs.releaseConfig_Optoma
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                outputFileName = "${variant.flavorName}_LiveTV.apk"
            }
        }
    }

    sourceSets {
        main {
            res.srcDirs += "src/main/resources"
//            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
//    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
//    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'androidx.leanback:leanback-preference:1.0.0'
    //noinspection GradleCompatible
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    //noinspection GradleCompatible
    implementation 'androidx.preference:preference:1.0.0'
    // alternatively - without Android dependencies for tests
    implementation 'androidx.paging:paging-runtime:2.1.0'

    compileOnly project(path: ':framework')
    implementation project(path: ':internal_i_solution')
    compileOnly project(path: ':leakcanary.android_intermediates.jar')
    compileOnly project(path: ':mediatek_support_fvp')
    compileOnly project(path: ':mediatek_support_sharecode')
    compileOnly project(path: ':mediatek_support_tv')
    compileOnly project(path: ':mediatek_tv_ui')
    compileOnly project(path: ':mtkaudiopatchmanager')
    compileOnly project(path: ':RxMdsClientNew')
    implementation project(path: ':systemui.lib_intermediates')
    compileOnly project(path: ':tv.recommended.aidl_intermediates')
    implementation project(path: ':tvappview')

/*//    implementation files('libs\\systemui.lib_intermediates.jar')
    implementation project(path: ':systemui.lib_intermediates')
    implementation 'androidx.palette:palette:1.0.0'
//    compileOnly files('libs\\MtkTvApiAidl.jar')
    implementation project(path: ':MtkTvApiAidl')
//    compileOnly files('libs\\mediatek_tv_ini.jar')
    compileOnly project(path: ':mediatek_tv_ini')
//    compileOnly files('libs\\mediatek_support_tv.jar')
    compileOnly project(path: ':mediatek_support_tv')
//    compileOnly files('libs\\tv.recommended.aidl_intermediates.jar')
    compileOnly project(path: ':tv.recommended.aidl_intermediates') // FIXME WTF!! Android R.class !!
//    compileOnly files('libs\\mediatek_support_sharecode.jar')
//    implementation project(path: ':mediatek_support_sharecode')
//    compileOnly files('libs\\mediatek_support_fvp.jar')

//    compileOnly files('libs\\mediatek_tv_ui.jar')
    compileOnly project(path: ':mediatek_tv_ui')
//    compileOnly files('libs\\internal_i_solution.jar')

//    compileOnly files('libs\\mediatek_mmp.jar')
    compileOnly project(path: ':mediatek_mmp')
//    compileOnly files('libs\\mtkaudiopatchmanager.jar')
    compileOnly project(path: ':mtkaudiopatchmanager')
//    compileOnly files('libs\\RxMdsClientNew.jar')
    compileOnly project(path: ':RxMdsClientNew')
//    compileOnly files('libs\\squareup_leakcanary.jar')
    compileOnly project(path: ':squareup_leakcanary')
//    compileOnly files('libs\\leakcanary.android_intermediates.jar.jar')
    */
}
